#+title:  Very Basic Introduction of Rust
#+author: Klef Learning
#+date:   2025.02.26

* A Very Basic Introduction of Rust

** Introduction

Rustは高速かつ安全なコードを記述することができる比較的新しい言語である。
また、RustのパッケージマネージャーであるCargoは非常に優秀であり、行儀もいい。
一方で、良くも悪くもRust最大の特徴といえるのが、「所有権」の概念である。これは後程詳述する。
この所有権とセットの概念で、「参照」や「ライフタイム」といった初心者の心を折るような用語が並ぶこととなる。
このように、C/C++の煩雑さと引き換えに、シンプルで明瞭だがそれを意識したコーディングが難しい概念が導入されているのがRust言語である。

本資料は付属のNix Flakesによって提供される環境内でEmacsを利用することを前提に作成されている。
その他のリーダーや環境を用いた場合については、操作が異なることに注意されたい。
また、すでにローカル環境にEmacsがインストールされており、init.elなどでカスタマイズされている場合において、こちらでカスタマイズしたEmacsの設定ではなく、ローカル環境の設定が優先されることが報告されている。
Emacserは上記事項に注意されたい。

なお、 =nix develop -i= で実行すれば動作することも報告されているため、適宜そちらも利用することを推奨する。

** Hello World

何はともあれ、触ってみないことには何もいえないので、とりあえず ~Hello, World!~ を出力してみよう。
=println!()= マクロ(関数ではない)を用いると出力できる。引数は =str= 型となる。

また、Rustも多くのC言語派生言語と同様、 =main= 関数が必要である。関数定義は =fn= でできる。
よって、 ~Hello, World!~ を出力するためには、以下のコードを書けばよい。

#+NAME: Hello, World!
#+BEGIN_SRC rust
fn main() {
  println!("Hello, World!")
}
#+END_SRC

ここで、コード内にカーソル(厳密にはキャレットだが)がある状態で、C-c C-c (Ctrlキーを押しながらCキーを2回押す)で、下の #+RESULTS:と書かれたところに実行結果が出力される。
これは、Emacsが提供する「Org Babel」という機能である。大変に便利であり、私はこれがやりたいがためにEmacsを採用した。
vということで、実行してみよう。

#+RESULTS: Hello, World!
: Hello, World!

次は、 ~Hello, World!~ ではなく、 ~Hello, Rust~ を出力してみよう。

以下に、Hello, World!のときのプログラムを記載しておくため、必要箇所を変更し実行せよ。

#+NAME: Hello, Rust!
#+BEGIN_SRC rust
fn main() {
  println!("Hello, World")
}
#+END_SRC

なお、実行結果が変化する場合、RESULTは更新されるため、削除する必要はない。

#+RESULTS: Hello, Rust!
: Hello, World

** 変数の扱い

Rustにおいて、変数はデフォルトで =不変変数= である。
可変にしたければ =mut= をつける。

また、変数を ~println!~ マクロで表示するためには、以下のようにする。

#+BEGIN_SRC rust
  let str = "Hello, World";
  let org = "Klef Learning";
  let name = "Your Name";
  println!("{}", str);
  println!("Welcome to {}, {}", org, name);
#+END_SRC

次に、以下のコードの実行結果を確認せよ。

#+BEGIN_SRC rust
  let num = 1;
  num = num + 2;
  println!("number: {}", num);
#+END_SRC

#+BEGIN_SRC rust
  let mut n = 1;
  n = n + 2;
  println!("number: {}", n)
#+END_SRC

** FizzBuzz

次に、FizzBuzz問題を解くプログラムを作成しよう。
一般に、FizzBuzz問題をを解く際には =if= や =switch= が使われる。
また、繰り返しには =for= や =while= が使われる。
以下にPython ( =if - else if= ) および JavaScript ( =switch= ) における例を示す。

#+BEGIN_SRC python
  i = 1
  while (i < 31)
      if i % 15 == 0:
  	  print("FizzBuzz")
            i++
      else if i % 3 == 0:
  	  print("Fizz")
            i++
      else if i % 5 == 0:
  	  print("Buzz")
            i++
      else:
          print(i)
#+END_SRC

#+BEGIN_SRC javascript
  for (let i = 1; i < 31; i++) {
      case (i % 15 == 0):
          console.log("FizzBuzz");
          break;
      case (i % 3 == 0):
          console.log("Fizz");
          break;
      case (i % 5 == 0):
          console.log("Buzz");
          break;
      default:
          console.log(i);
      }
  }
#+END_SRC

Rustには、他の言語でいう ~switch~ に相当する ~match~ という構文がある。
それを用いると、以下のように表すことができる。

#+BEGIN_SRC rust
  for i in 1 .. 31 {
    match (i % 3, i % 5) {
      (0, 0) => println!("FizzBuzz");
      (0, _) => println!("Fizz");
      (_, 0) => println!("Buzz");
      _ => println!("{}", i);
    };
  };
#+END_SRC

** 関数

Rustにおける関数定義は =fn= を用いる。引数あり、戻り値なしの関数を定義するには以下のようにする。

#+BEGIN_SRC rust
  fn fizzbuzz(n){
    for i in 1 .. n + 1 {
      match (i % 3, i % 5) {
        (0, 0) => println!("FizzBuzz");
        (0, _) => println!("Fizz");
        (_, 0) => println!("Buzz");
        _ => println!("{}", i);
      };
    };
  }
#+END_SRC

** 課題

-5以上の整数を引数をとり、以下のように処理する関数 =test= を =test.rs= 内に作成せよ。
ただし、以下引数をnとする。

- 負の数のときは"Minus"と表示
- 0 のときは"Zero"と表示
- 1 のときは"One"と表示
- 2 のときは"Two"と表示
- それ以外のときは引数を表示

ただし、テストとして、ファイル内に以下の内容をコピーせよ

#+BEGIN_SRC rust
  fn main() {
    test(-2);
    test(0);
    test(1);
    test(2);
    test(10);
  }
#+END_SRC

なお、ファイルに書いたプログラムは以下のコマンドで実行できる。

#+BEGIN_SRC rust
  cargo run --bin test
#+END_SRC
